package cloud_test

import (
	"encoding/json"
	"testing"

	"github.com/sev-2/raiden/pkg/supabase/drivers/cloud"
	"github.com/sev-2/raiden/pkg/supabase/objects"
	"github.com/stretchr/testify/assert"
)

func TestBuildCreateSql_Success(t *testing.T) {
	payload := objects.Table{}
	jsonData := `{"columns":[{"schema":"public","table":"test_candidate","name":"id","default_value":null,"data_type":"bigint","format":"int8","is_identity":true,"identity_generation":"BY DEFAULT","is_generated":false,"is_nullable":false,"is_updatable":true,"is_unique":false,"enums":[],"check":null,"comment":null},{"schema":"public","table":"test_candidate","name":"name","default_value":null,"data_type":"character varying","format":"varchar","is_identity":false,"identity_generation":null,"is_generated":false,"is_nullable":true,"is_updatable":true,"is_unique":false,"enums":[],"check":null,"comment":null},{"schema":"public","table":"test_candidate","name":"created_at","default_value":"now()","data_type":"timestamp with time zone","format":"timestamptz","is_identity":false,"identity_generation":null,"is_generated":false,"is_nullable":true,"is_updatable":true,"is_unique":false,"enums":[],"check":null,"comment":null}],"comment":"list of new candidate","dead_rows_estimate":0,"live_rows_estimate":2,"name":"test_candidate","primary_keys":[{"name":"id","schema":"public","table_name":"test_candidate"}],"relationships":[{"source_schema":"public","source_table_name":"submission","source_column_name":"candidate_id","target_table_schema":"public","target_table_name":"test_candidate","target_column_name":"id"}],"replica_identity":"DEFAULT","rls_enabled":true,"rls_forced":false,"schema":"public"}`
	err := json.Unmarshal([]byte(jsonData), &payload)
	assert.NoError(t, err)

	sql, err := cloud.BuildCreateQuery("public", payload)
	assert.NoError(t, err)

	expectedQuery := "CREATE TABLE public.test_candidate (id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL ,name character varying  NULL ,created_at timestamp with time zone DEFAULT 'now()' NULL ,PRIMARY KEY (id));"
	assert.Equal(t, expectedQuery, sql)
}

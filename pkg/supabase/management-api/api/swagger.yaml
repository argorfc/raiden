openapi: 3.0.0
info:
  title: Supabase API (v1)
  description: ""
  contact: {}
  version: 1.0.0
servers:
- url: /
tags:
- name: organizations
  description: Organization endpoints
- name: projects
  description: Project endpoints
paths:
  /v1/branches/{branch_id}:
    get:
      tags:
      - database branches (beta)
      summary: Get database branch config
      description: Fetches configurations of the specified database branch
      operationId: getBranchDetails
      parameters:
      - name: branch_id
        in: path
        description: Branch ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDetailResponse'
        "500":
          description: Failed to retrieve database branch
      security:
      - bearer: []
    delete:
      tags:
      - database branches (beta)
      summary: Delete a database branch
      description: Deletes the specified database branch
      operationId: deleteBranch
      parameters:
      - name: branch_id
        in: path
        description: Branch ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
        "500":
          description: Failed to delete database branch
      security:
      - bearer: []
    patch:
      tags:
      - database branches (beta)
      summary: Update database branch config
      description: Updates the configuration of the specified database branch
      operationId: updateBranch
      parameters:
      - name: branch_id
        in: path
        description: Branch ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBranchBody'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchResponse'
        "500":
          description: Failed to update database branch
      security:
      - bearer: []
  /v1/projects:
    get:
      tags:
      - projects
      summary: List all projects
      description: Returns a list of all projects you've previously created.
      operationId: getProjects
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
                x-content-type: application/json
      security:
      - bearer: []
    post:
      tags:
      - projects
      summary: Create a project
      operationId: createProject
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectBody'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
      security:
      - bearer: []
  /v1/organizations:
    get:
      tags:
      - organizations
      summary: List all organizations
      description: Returns a list of organizations that you currently belong to.
      operationId: getOrganizations
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationResponseV1'
                x-content-type: application/json
        "500":
          description: Unexpected error listing organizations
      security:
      - bearer: []
    post:
      tags:
      - organizations
      summary: Create an organization
      operationId: createOrganization
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationBodyV1'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponseV1'
        "500":
          description: Unexpected error creating an organization
      security:
      - bearer: []
  /v1/oauth/authorize:
    get:
      tags:
      - oauth (beta)
      summary: Authorize user through oauth
      operationId: authorize
      parameters:
      - name: client_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: response_type
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - code
          - token
          - id_token token
      - name: redirect_uri
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: scope
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: state
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: response_mode
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: code_challenge
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: code_challenge_method
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - plain
          - sha256
          - S256
      responses:
        "303":
          description: ""
  /v1/oauth/token:
    post:
      tags:
      - oauth (beta)
      summary: Exchange auth code for user's access and refresh token
      operationId: token
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OAuthTokenBody'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthTokenResponse'
  /v1/snippets:
    get:
      tags:
      - snippets
      summary: Lists SQL snippets for the logged in user
      operationId: listSnippets
      parameters:
      - name: project_ref
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnippetList'
        "500":
          description: Failed to list user's SQL snippets
      security:
      - bearer: []
  /v1/snippets/{id}:
    get:
      tags:
      - snippets
      summary: Gets a specific SQL snippet
      operationId: getSnippet
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnippetResponse'
        "500":
          description: Failed to retrieve SQL snippet
      security:
      - bearer: []
  /v1/projects/{ref}/api-keys:
    get:
      tags:
      - projects
      summary: Get project api keys
      operationId: getProjectApiKeys
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKeyResponse'
                x-content-type: application/json
        "403":
          description: ""
      security:
      - bearer: []
  /v1/projects/{ref}/branches:
    get:
      tags:
      - database branches (beta)
      summary: List all database branches
      description: Returns all database branches of the specified project.
      operationId: getBranches
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BranchResponse'
                x-content-type: application/json
        "500":
          description: Failed to retrieve database branches
      security:
      - bearer: []
    post:
      tags:
      - database branches (beta)
      summary: Create a database branch
      description: Creates a database branch from the specified project.
      operationId: createBranch
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBranchBody'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchResponse'
        "500":
          description: Failed to create database branch
      security:
      - bearer: []
    delete:
      tags:
      - database branches (beta)
      summary: Disables preview branching
      description: Disables preview branching for the specified project
      operationId: disableBranch
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
        "500":
          description: Failed to disable preview branching
      security:
      - bearer: []
  /v1/projects/{ref}/custom-hostname:
    get:
      tags:
      - custom hostname (beta)
      summary: Gets project's custom hostname config
      operationId: getCustomHostnameConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCustomHostnameResponse'
        "403":
          description: ""
        "500":
          description: Failed to retrieve project's custom hostname config
      security:
      - bearer: []
    delete:
      tags:
      - custom hostname (beta)
      summary: Deletes a project's custom hostname configuration
      operationId: removeCustomHostnameConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
        "403":
          description: ""
        "500":
          description: Failed to delete project custom hostname configuration
      security:
      - bearer: []
  /v1/projects/{ref}/custom-hostname/initialize:
    post:
      tags:
      - custom hostname (beta)
      summary: Updates project's custom hostname configuration
      operationId: createCustomHostnameConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomHostnameBody'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCustomHostnameResponse'
        "403":
          description: ""
        "500":
          description: Failed to update project custom hostname configuration
      security:
      - bearer: []
  /v1/projects/{ref}/custom-hostname/reverify:
    post:
      tags:
      - custom hostname (beta)
      summary: Attempts to verify the DNS configuration for project's custom hostname
        configuration
      operationId: reverify
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCustomHostnameResponse'
        "403":
          description: ""
        "500":
          description: Failed to verify project custom hostname configuration
      security:
      - bearer: []
  /v1/projects/{ref}/custom-hostname/activate:
    post:
      tags:
      - custom hostname (beta)
      summary: Activates a custom hostname for a project.
      operationId: activate
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCustomHostnameResponse'
        "403":
          description: ""
        "500":
          description: Failed to activate project custom hostname configuration
      security:
      - bearer: []
  /v1/projects/{ref}/network-bans/retrieve:
    post:
      tags:
      - network bans (beta)
      summary: Gets project's network bans
      operationId: getNetworkBans
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkBanResponse'
        "403":
          description: ""
        "500":
          description: Failed to retrieve project's network bans
      security:
      - bearer: []
  /v1/projects/{ref}/network-bans:
    delete:
      tags:
      - network bans (beta)
      summary: Remove network bans.
      operationId: removeNetworkBan
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveNetworkBanRequest'
        required: true
      responses:
        "200":
          description: ""
        "403":
          description: ""
        "500":
          description: Failed to remove network bans.
      security:
      - bearer: []
  /v1/projects/{ref}/network-restrictions:
    get:
      tags:
      - network restrictions (beta)
      summary: Gets project's network restrictions
      operationId: getNetworkRestrictions
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkRestrictionsResponse'
        "403":
          description: ""
        "500":
          description: Failed to retrieve project's network restrictions
      security:
      - bearer: []
  /v1/projects/{ref}/network-restrictions/apply:
    post:
      tags:
      - network restrictions (beta)
      summary: Updates project's network restrictions
      operationId: applyNetworkRestrictions
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkRestrictionsRequest'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkRestrictionsResponse'
        "403":
          description: ""
        "500":
          description: Failed to update project network restrictions
      security:
      - bearer: []
  /v1/projects/{ref}/pgsodium:
    get:
      tags:
      - pgsodium (beta)
      summary: Gets project's pgsodium config
      operationId: getPgsodiumConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PgsodiumConfigResponse'
        "403":
          description: ""
        "500":
          description: Failed to retrieve project's pgsodium config
      security:
      - bearer: []
    put:
      tags:
      - pgsodium (beta)
      summary: Updates project's pgsodium config. Updating the root_key can cause
        all data encrypted with the older key to become inaccessible.
      operationId: updatePgsodiumConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePgsodiumConfigBody'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PgsodiumConfigResponse'
        "403":
          description: ""
        "500":
          description: Failed to update project's pgsodium config
      security:
      - bearer: []
  /v1/projects/{ref}/postgrest:
    get:
      tags:
      - services
      summary: Gets project's postgrest config
      operationId: getPostgRESTConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgrestConfigWithJWTSecretResponse'
        "403":
          description: ""
        "500":
          description: Failed to retrieve project's postgrest config
      security:
      - bearer: []
    patch:
      tags:
      - services
      summary: Updates project's postgrest config
      operationId: updatePostgRESTConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostgrestConfigBody'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgrestConfigResponse'
        "403":
          description: ""
        "500":
          description: Failed to update project's postgrest config
      security:
      - bearer: []
  /v1/projects/{ref}:
    delete:
      tags:
      - projects
      summary: Deletes the given project
      operationId: deleteProject
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRefResponse'
        "403":
          description: ""
      security:
      - bearer: []
  /v1/projects/{ref}/secrets:
    get:
      tags:
      - secrets
      summary: List all secrets
      description: Returns all secrets you've previously added to the specified project.
      operationId: getSecrets
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SecretResponse'
                x-content-type: application/json
        "403":
          description: ""
        "500":
          description: Failed to retrieve project's secrets
      security:
      - bearer: []
    post:
      tags:
      - secrets
      summary: Bulk create secrets
      description: Creates multiple secrets and adds them to the specified project.
      operationId: createSecrets
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateSecretBody'
        required: true
      responses:
        "201":
          description: ""
        "403":
          description: ""
        "500":
          description: Failed to create project's secrets
      security:
      - bearer: []
    delete:
      tags:
      - secrets
      summary: Bulk delete secrets
      description: Deletes all secrets with the given names from the specified project
      operationId: deleteSecrets
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
        "403":
          description: ""
        "500":
          description: Failed to delete secrets with given names
      security:
      - bearer: []
  /v1/projects/{ref}/ssl-enforcement:
    get:
      tags:
      - ssl enforcement (beta)
      summary: Get project's SSL enforcement configuration.
      operationId: getSslEnforcementConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SslEnforcementResponse'
        "403":
          description: ""
        "500":
          description: Failed to retrieve project's SSL enforcement config
      security:
      - bearer: []
    put:
      tags:
      - ssl enforcement (beta)
      summary: Update project's SSL enforcement configuration.
      operationId: updateSslEnforcementConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SslEnforcementRequest'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SslEnforcementResponse'
        "403":
          description: ""
        "500":
          description: Failed to update project's SSL enforcement configuration.
      security:
      - bearer: []
  /v1/projects/{ref}/types/typescript:
    get:
      tags:
      - projects
      summary: Generate TypeScript types
      description: Returns the TypeScript types of your schema for use with supabase-js.
      operationId: getTypescriptTypes
      parameters:
      - name: included_schemas
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: public
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypescriptResponse'
        "403":
          description: ""
        "500":
          description: Failed to generate TypeScript types
      security:
      - bearer: []
  /v1/projects/{ref}/vanity-subdomain:
    get:
      tags:
      - vanity subdomain (beta)
      summary: Gets current vanity subdomain config
      operationId: getVanitySubdomainConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VanitySubdomainConfigResponse'
        "403":
          description: ""
        "500":
          description: Failed to get project vanity subdomain configuration
      security:
      - bearer: []
    delete:
      tags:
      - vanity subdomain (beta)
      summary: Deletes a project's vanity subdomain configuration
      operationId: removeVanitySubdomainConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
        "403":
          description: ""
        "500":
          description: Failed to delete project vanity subdomain configuration
      security:
      - bearer: []
  /v1/projects/{ref}/vanity-subdomain/check-availability:
    post:
      tags:
      - vanity subdomain (beta)
      summary: Checks vanity subdomain availability
      operationId: checkVanitySubdomainAvailability
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VanitySubdomainBody'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubdomainAvailabilityResponse'
        "403":
          description: ""
        "500":
          description: Failed to check project vanity subdomain configuration
      security:
      - bearer: []
  /v1/projects/{ref}/vanity-subdomain/activate:
    post:
      tags:
      - vanity subdomain (beta)
      summary: Activates a vanity subdomain for a project.
      operationId: activateVanitySubdomainPlease
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VanitySubdomainBody'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivateVanitySubdomainResponse'
        "403":
          description: ""
        "500":
          description: Failed to activate project vanity subdomain configuration
      security:
      - bearer: []
  /v1/projects/{ref}/upgrade:
    post:
      tags:
      - database version upgrade (beta)
      summary: Upgrades the project's Postgres version
      operationId: upgradeProject
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradeDatabaseBody'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUpgradeInitiateResponse'
        "403":
          description: ""
        "500":
          description: Failed to initiate project upgrade
      security:
      - bearer: []
  /v1/projects/{ref}/upgrade/eligibility:
    get:
      tags:
      - database version upgrade (beta)
      summary: Returns the project's eligibility for upgrades
      operationId: upgradeEligibilityInformation
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUpgradeEligibilityResponse'
        "403":
          description: ""
        "500":
          description: Failed to determine project upgrade eligibility
      security:
      - bearer: []
  /v1/projects/{ref}/upgrade/status:
    get:
      tags:
      - database version upgrade (beta)
      summary: Gets the latest status of the project's upgrade
      operationId: getUpgradeStatus
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseUpgradeStatusResponse'
        "403":
          description: ""
        "500":
          description: Failed to retrieve project upgrade status
      security:
      - bearer: []
  /v1/projects/{ref}/readonly:
    get:
      tags:
      - database readonly mode
      summary: Returns project's readonly mode status
      operationId: getReadOnlyModeStatus
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadOnlyStatusResponse'
        "500":
          description: Failed to get project readonly mode status
      security:
      - bearer: []
  /v1/projects/{ref}/readonly/temporary-disable:
    post:
      tags:
      - database readonly mode
      summary: Disables project's readonly mode for the next 15 minutes
      operationId: temporarilyDisableReadonlyMode
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "201":
          description: ""
        "500":
          description: Failed to disable project's readonly mode
      security:
      - bearer: []
  /v1/projects/{ref}/read-replicas/setup:
    post:
      tags:
      - read replicas (beta)
      summary: Set up a read replica
      operationId: setUpReadReplica
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUpReadReplicaBody'
        required: true
      responses:
        "201":
          description: ""
        "500":
          description: Failed to set up read replica
      security:
      - bearer: []
  /v1/projects/{ref}/read-replicas/remove:
    post:
      tags:
      - read replicas (beta)
      summary: Remove a read replica
      operationId: removeReadReplica
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveReadReplicaBody'
        required: true
      responses:
        "201":
          description: ""
        "500":
          description: Failed to remove read replica
      security:
      - bearer: []
  /v1/projects/{ref}/health:
    get:
      tags:
      - services
      summary: Gets project's service health status
      operationId: checkServiceHealth
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      - name: timeout_ms
        in: query
        required: false
        style: form
        explode: true
        schema:
          maximum: 10000
          minimum: 0
          type: integer
      - name: services
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - auth
            - db
            - pooler
            - realtime
            - rest
            - storage
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceHealthResponse'
                x-content-type: application/json
        "500":
          description: Failed to retrieve project's service health status
      security:
      - bearer: []
  /v1/projects/{ref}/config/database/postgres:
    get:
      tags:
      - projects config
      summary: Gets project's Postgres config
      operationId: getConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresConfigResponse'
        "500":
          description: Failed to retrieve project's Postgres config
      security:
      - bearer: []
    put:
      tags:
      - projects config
      summary: Updates project's Postgres config
      operationId: updateConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostgresConfigBody'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresConfigResponse'
        "500":
          description: Failed to update project's Postgres config
      security:
      - bearer: []
  /v1/projects/{ref}/config/database/pgbouncer:
    get:
      tags:
      - projects config
      summary: Get project's pgbouncer config
      operationId: v1GetPgbouncerConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PgbouncerConfigResponse'
        "500":
          description: Failed to retrieve project's pgbouncer config
  /v1/projects/{ref}/config/auth:
    get:
      tags:
      - projects config
      summary: Gets project's auth config
      operationId: getV1AuthConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthConfigResponse'
        "403":
          description: ""
        "500":
          description: Failed to retrieve project's auth config
      security:
      - bearer: []
    patch:
      tags:
      - projects config
      summary: Updates a project's auth config
      operationId: updateV1AuthConfig
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuthConfigBody'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthConfigResponse'
        "403":
          description: ""
        "500":
          description: Failed to update project's auth config
      security:
      - bearer: []
  /v1/projects/{ref}/database/query:
    post:
      tags:
      - projects (beta)
      summary: Run sql query
      operationId: v1RunQuery
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunQueryBody'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
        "403":
          description: ""
        "500":
          description: Failed to run sql query
      security:
      - bearer: []
  /v1/projects/{ref}/database/webhooks/enable:
    post:
      tags:
      - projects (beta)
      summary: Enables Database Webhooks on the project
      operationId: v1EnableDatabaseWebhooks
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "201":
          description: ""
        "403":
          description: ""
        "500":
          description: Failed to enable Database Webhooks on the project
      security:
      - bearer: []
  /v1/projects/{ref}/functions:
    get:
      tags:
      - functions
      summary: List all functions
      description: Returns all functions you've previously added to the specified
        project.
      operationId: getFunctions
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FunctionResponse'
                x-content-type: application/json
        "403":
          description: ""
        "500":
          description: Failed to retrieve project's functions
      security:
      - bearer: []
    post:
      tags:
      - functions
      summary: Create a function
      description: Creates a function and adds it to the specified project.
      operationId: createFunction
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      - name: slug
        in: query
        required: false
        style: form
        explode: true
        schema:
          pattern: "/^[A-Za-z0-9_-]+$/"
          type: string
      - name: name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: verify_jwt
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: import_map
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: entrypoint_path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: import_map_path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFunctionBody'
          application/vnd.denoland.eszip:
            schema:
              $ref: '#/components/schemas/CreateFunctionBody'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionResponse'
        "403":
          description: ""
        "500":
          description: Failed to create project's function
      security:
      - bearer: []
  /v1/projects/{ref}/functions/{function_slug}:
    get:
      tags:
      - functions
      summary: Retrieve a function
      description: Retrieves a function with the specified slug and project.
      operationId: getFunction
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      - name: function_slug
        in: path
        description: Function slug
        required: true
        style: simple
        explode: false
        schema:
          pattern: "/^[A-Za-z0-9_-]+$/"
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionSlugResponse'
        "403":
          description: ""
        "500":
          description: Failed to retrieve function with given slug
      security:
      - bearer: []
    delete:
      tags:
      - functions
      summary: Delete a function
      description: Deletes a function with the specified slug from the specified project.
      operationId: deleteFunction
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      - name: function_slug
        in: path
        description: Function slug
        required: true
        style: simple
        explode: false
        schema:
          pattern: "/^[A-Za-z0-9_-]+$/"
          type: string
      responses:
        "200":
          description: ""
        "403":
          description: ""
        "500":
          description: Failed to delete function with given slug
      security:
      - bearer: []
    patch:
      tags:
      - functions
      summary: Update a function
      description: Updates a function with the specified slug and project.
      operationId: updateFunction
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      - name: function_slug
        in: path
        description: Function slug
        required: true
        style: simple
        explode: false
        schema:
          pattern: "/^[A-Za-z0-9_-]+$/"
          type: string
      - name: slug
        in: query
        required: false
        style: form
        explode: true
        schema:
          pattern: "/^[A-Za-z0-9_-]+$/"
          type: string
      - name: name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: verify_jwt
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: import_map
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: entrypoint_path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: import_map_path
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFunctionBody'
          application/vnd.denoland.eszip:
            schema:
              $ref: '#/components/schemas/UpdateFunctionBody'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionResponse'
        "403":
          description: ""
        "500":
          description: Failed to update function with given slug
      security:
      - bearer: []
  /v1/projects/{ref}/functions/{function_slug}/body:
    get:
      tags:
      - functions
      summary: Retrieve a function body
      description: Retrieves a function body for the specified slug and project.
      operationId: getFunctionBody
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      - name: function_slug
        in: path
        description: Function slug
        required: true
        style: simple
        explode: false
        schema:
          pattern: "/^[A-Za-z0-9_-]+$/"
          type: string
      responses:
        "200":
          description: ""
        "403":
          description: ""
        "500":
          description: Failed to retrieve function body with given slug
      security:
      - bearer: []
  /v1/projects/{ref}/storage/buckets:
    get:
      tags:
      - storage
      summary: Lists all buckets
      operationId: getBuckets
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/V1StorageBucketResponse'
                x-content-type: application/json
        "403":
          description: ""
        "500":
          description: Failed to get list of buckets
      security:
      - bearer: []
  /v1/projects/{ref}/config/auth/sso/providers:
    get:
      tags:
      - sso
      summary: Lists all SSO providers
      operationId: listAllProviders
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProvidersResponse'
        "403":
          description: ""
        "404":
          description: SAML 2.0 support is not enabled for this project
      security:
      - bearer: []
    post:
      tags:
      - sso
      summary: Creates a new SSO provider
      operationId: createProviderForProject
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProviderBody'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProviderResponse'
        "403":
          description: ""
        "404":
          description: SAML 2.0 support is not enabled for this project
      security:
      - bearer: []
  /v1/projects/{ref}/config/auth/sso/providers/{provider_id}:
    get:
      tags:
      - sso
      summary: Gets a SSO provider by its UUID
      operationId: getProviderById
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      - name: provider_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProviderResponse'
        "403":
          description: ""
        "404":
          description: "Either SAML 2.0 was not enabled for this project, or the provider\
            \ does not exist"
      security:
      - bearer: []
    put:
      tags:
      - sso
      summary: Updates a SSO provider by its UUID
      operationId: updateProviderById
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      - name: provider_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProviderBody'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProviderResponse'
        "403":
          description: ""
        "404":
          description: "Either SAML 2.0 was not enabled for this project, or the provider\
            \ does not exist"
      security:
      - bearer: []
    delete:
      tags:
      - sso
      summary: Removes a SSO provider by its UUID
      operationId: removeProviderById
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      - name: provider_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProviderResponse'
        "403":
          description: ""
        "404":
          description: "Either SAML 2.0 was not enabled for this project, or the provider\
            \ does not exist"
      security:
      - bearer: []
  /v1/projects/{ref}/database/backups:
    get:
      tags:
      - backups
      summary: Lists all backups
      operationId: getBackups
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1BackupsResponse'
        "500":
          description: Failed to get backups
      security:
      - bearer: []
  /v1/projects/{ref}/database/backups/restore-pitr:
    post:
      tags:
      - backups
      summary: Restores a PITR backup for a database
      operationId: v1RestorePitr
      parameters:
      - name: ref
        in: path
        description: Project ref
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 20
          minLength: 20
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1RestorePitrBody'
        required: true
      responses:
        "201":
          description: ""
      security:
      - bearer: []
  /v1/organizations/{slug}/members:
    get:
      tags:
      - organizations
      summary: List members of an organization
      operationId: v1ListOrganizationMembers
      parameters:
      - name: slug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/V1OrganizationMemberResponse'
                x-content-type: application/json
      security:
      - bearer: []
  /v1/organizations/{slug}:
    get:
      tags:
      - organizations
      summary: Gets information about the organization
      operationId: getOrganization
      parameters:
      - name: slug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1OrganizationSlugResponse'
      security:
      - bearer: []
components:
  schemas:
    BranchDetailResponse:
      required:
      - db_host
      - db_port
      - postgres_version
      - ref
      - status
      type: object
      properties:
        db_port:
          type: integer
        ref:
          type: string
        postgres_version:
          type: string
        status:
          type: string
          enum:
          - ACTIVE_HEALTHY
          - ACTIVE_UNHEALTHY
          - COMING_UP
          - GOING_DOWN
          - INACTIVE
          - INIT_FAILED
          - REMOVED
          - RESTORING
          - UNKNOWN
          - UPGRADING
          - PAUSING
        db_host:
          type: string
        db_user:
          type: string
        db_pass:
          type: string
        jwt_secret:
          type: string
      example:
        postgres_version: postgres_version
        ref: ref
        jwt_secret: jwt_secret
        db_user: db_user
        db_port: 0
        db_pass: db_pass
        db_host: db_host
        status: ACTIVE_HEALTHY
    UpdateBranchBody:
      type: object
      properties:
        branch_name:
          type: string
        git_branch:
          type: string
        reset_on_push:
          type: boolean
    BranchResponse:
      required:
      - created_at
      - id
      - is_default
      - name
      - parent_project_ref
      - project_ref
      - reset_on_push
      - updated_at
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        project_ref:
          type: string
        parent_project_ref:
          type: string
        is_default:
          type: boolean
        git_branch:
          type: string
        pr_number:
          type: number
        reset_on_push:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
      example:
        project_ref: project_ref
        updated_at: updated_at
        parent_project_ref: parent_project_ref
        reset_on_push: true
        name: name
        pr_number: 0.80082819046101150206595775671303272247314453125
        created_at: created_at
        git_branch: git_branch
        id: id
        is_default: true
    DatabaseResponse:
      required:
      - host
      - version
      type: object
      properties:
        host:
          type: string
          description: Database host
        version:
          type: string
          description: Database version
      example:
        host: host
        version: version
    ProjectResponse:
      required:
      - created_at
      - id
      - name
      - organization_id
      - region
      type: object
      properties:
        id:
          type: string
          description: Id of your project
        organization_id:
          type: string
          description: Slug of your organization
        name:
          type: string
          description: Name of your project
        region:
          type: string
          description: Region of your project
          example: us-east-1
        created_at:
          type: string
          description: Creation timestamp
          example: 2023-03-29T16:32:59Z
        database:
          $ref: '#/components/schemas/DatabaseResponse'
      example:
        database:
          host: host
          version: version
        organization_id: organization_id
        name: name
        created_at: 2023-03-29T16:32:59Z
        id: id
        region: us-east-1
    CreateProjectBody:
      required:
      - db_pass
      - name
      - organization_id
      - plan
      - region
      type: object
      properties:
        db_pass:
          type: string
          description: Database password
        name:
          type: string
          description: "Name of your project, should not contain dots"
        organization_id:
          type: string
          description: Slug of your organization
        plan:
          type: string
          description: Subscription plan is now set on organization level and is ignored
            in this request
          example: free
          deprecated: true
          enum:
          - free
          - pro
        region:
          type: string
          description: Region you want your server to reside in
          example: us-east-1
          enum:
          - us-east-1
          - us-west-1
          - us-west-2
          - ap-east-1
          - ap-southeast-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-southeast-2
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ca-central-1
          - ap-south-1
          - sa-east-1
        kps_enabled:
          type: boolean
          deprecated: true
    OrganizationResponseV1:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      example:
        name: name
        id: id
    CreateOrganizationBodyV1:
      required:
      - name
      type: object
      properties:
        name:
          type: string
    OAuthTokenBody:
      required:
      - client_id
      - client_secret
      - grant_type
      type: object
      properties:
        grant_type:
          type: string
          enum:
          - authorization_code
          - refresh_token
        client_id:
          type: string
        client_secret:
          type: string
        code:
          type: string
        code_verifier:
          type: string
        redirect_uri:
          type: string
        refresh_token:
          type: string
    OAuthTokenResponse:
      required:
      - access_token
      - expires_in
      - refresh_token
      - token_type
      type: object
      properties:
        token_type:
          type: string
          enum:
          - Bearer
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: number
      example:
        access_token: access_token
        refresh_token: refresh_token
        token_type: Bearer
        expires_in: 0.80082819046101150206595775671303272247314453125
    SnippetProject:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: number
        name:
          type: string
      example:
        name: name
        id: 0.80082819046101150206595775671303272247314453125
    SnippetUser:
      required:
      - id
      - username
      type: object
      properties:
        id:
          type: number
        username:
          type: string
      example:
        id: 6.02745618307040320615897144307382404804229736328125
        username: username
    SnippetMeta:
      required:
      - description
      - id
      - inserted_at
      - name
      - owner
      - project
      - type
      - updated_at
      - updated_by
      - visibility
      type: object
      properties:
        id:
          type: string
        inserted_at:
          type: string
        updated_at:
          type: string
        type:
          type: string
          enum:
          - sql
        visibility:
          type: string
          enum:
          - user
          - project
          - org
          - public
        name:
          type: string
        description:
          type: string
          nullable: true
        project:
          $ref: '#/components/schemas/SnippetProject'
        owner:
          $ref: '#/components/schemas/SnippetUser'
        updated_by:
          $ref: '#/components/schemas/SnippetUser'
      example:
        owner:
          id: 6.02745618307040320615897144307382404804229736328125
          username: username
        updated_at: updated_at
        visibility: user
        name: name
        updated_by: null
        description: description
        project:
          name: name
          id: 0.80082819046101150206595775671303272247314453125
        id: id
        type: sql
        inserted_at: inserted_at
    SnippetList:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SnippetMeta'
      example:
        data:
        - owner:
            id: 6.02745618307040320615897144307382404804229736328125
            username: username
          updated_at: updated_at
          visibility: user
          name: name
          updated_by: null
          description: description
          project:
            name: name
            id: 0.80082819046101150206595775671303272247314453125
          id: id
          type: sql
          inserted_at: inserted_at
        - owner:
            id: 6.02745618307040320615897144307382404804229736328125
            username: username
          updated_at: updated_at
          visibility: user
          name: name
          updated_by: null
          description: description
          project:
            name: name
            id: 0.80082819046101150206595775671303272247314453125
          id: id
          type: sql
          inserted_at: inserted_at
    SnippetContent:
      required:
      - favorite
      - schema_version
      - sql
      type: object
      properties:
        favorite:
          type: boolean
        schema_version:
          type: string
        sql:
          type: string
      example:
        schema_version: schema_version
        favorite: true
        sql: sql
    SnippetResponse:
      required:
      - content
      - description
      - id
      - inserted_at
      - name
      - owner
      - project
      - type
      - updated_at
      - updated_by
      - visibility
      type: object
      properties:
        id:
          type: string
        inserted_at:
          type: string
        updated_at:
          type: string
        type:
          type: string
          enum:
          - sql
        visibility:
          type: string
          enum:
          - user
          - project
          - org
          - public
        name:
          type: string
        description:
          type: string
          nullable: true
        project:
          $ref: '#/components/schemas/SnippetProject'
        owner:
          $ref: '#/components/schemas/SnippetUser'
        updated_by:
          $ref: '#/components/schemas/SnippetUser'
        content:
          $ref: '#/components/schemas/SnippetContent'
      example:
        owner:
          id: 6.02745618307040320615897144307382404804229736328125
          username: username
        updated_at: updated_at
        visibility: user
        name: name
        updated_by: null
        description: description
        project:
          name: name
          id: 0.80082819046101150206595775671303272247314453125
        id: id
        type: sql
        inserted_at: inserted_at
        content:
          schema_version: schema_version
          favorite: true
          sql: sql
    ApiKeyResponse:
      required:
      - api_key
      - name
      type: object
      properties:
        name:
          type: string
        api_key:
          type: string
      example:
        api_key: api_key
        name: name
    CreateBranchBody:
      required:
      - branch_name
      type: object
      properties:
        branch_name:
          type: string
        git_branch:
          type: string
        region:
          type: string
    UpdateCustomHostnameResponse:
      required:
      - custom_hostname
      - data
      - status
      type: object
      properties:
        status:
          type: string
          enum:
          - 1_not_started
          - 2_initiated
          - 3_challenge_verified
          - 4_origin_setup_completed
          - 5_services_reconfigured
        custom_hostname:
          type: string
        data:
          type: object
      example:
        data: {}
        custom_hostname: custom_hostname
        status: 1_not_started
    UpdateCustomHostnameBody:
      required:
      - custom_hostname
      type: object
      properties:
        custom_hostname:
          type: string
    NetworkBanResponse:
      required:
      - banned_ipv4_addresses
      type: object
      properties:
        banned_ipv4_addresses:
          type: array
          items:
            type: string
      example:
        banned_ipv4_addresses:
        - banned_ipv4_addresses
        - banned_ipv4_addresses
    RemoveNetworkBanRequest:
      required:
      - ipv4_addresses
      type: object
      properties:
        ipv4_addresses:
          type: array
          items:
            type: string
    NetworkRestrictionsRequest:
      required:
      - dbAllowedCidrs
      type: object
      properties:
        dbAllowedCidrs:
          type: array
          items:
            type: string
        dbAllowedCidrsV6:
          type: array
          items:
            type: string
      example:
        dbAllowedCidrs:
        - dbAllowedCidrs
        - dbAllowedCidrs
        dbAllowedCidrsV6:
        - dbAllowedCidrsV6
        - dbAllowedCidrsV6
    NetworkRestrictionsResponse:
      required:
      - config
      - entitlement
      - status
      type: object
      properties:
        entitlement:
          type: string
          enum:
          - disallowed
          - allowed
        config:
          $ref: '#/components/schemas/NetworkRestrictionsRequest'
        old_config:
          $ref: '#/components/schemas/NetworkRestrictionsRequest'
        status:
          type: string
          enum:
          - stored
          - applied
      example:
        old_config: null
        entitlement: disallowed
        config:
          dbAllowedCidrs:
          - dbAllowedCidrs
          - dbAllowedCidrs
          dbAllowedCidrsV6:
          - dbAllowedCidrsV6
          - dbAllowedCidrsV6
        status: stored
    PgsodiumConfigResponse:
      required:
      - root_key
      type: object
      properties:
        root_key:
          type: string
      example:
        root_key: root_key
    UpdatePgsodiumConfigBody:
      required:
      - root_key
      type: object
      properties:
        root_key:
          type: string
    PostgrestConfigWithJWTSecretResponse:
      required:
      - db_extra_search_path
      - db_schema
      - max_rows
      type: object
      properties:
        max_rows:
          type: integer
        db_schema:
          type: string
        db_extra_search_path:
          type: string
        jwt_secret:
          type: string
      example:
        jwt_secret: jwt_secret
        max_rows: 0
        db_extra_search_path: db_extra_search_path
        db_schema: db_schema
    UpdatePostgrestConfigBody:
      type: object
      properties:
        max_rows:
          maximum: 1000000
          minimum: 0
          type: integer
        db_extra_search_path:
          type: string
        db_schema:
          type: string
    PostgrestConfigResponse:
      required:
      - db_extra_search_path
      - db_schema
      - max_rows
      type: object
      properties:
        max_rows:
          type: integer
        db_schema:
          type: string
        db_extra_search_path:
          type: string
      example:
        max_rows: 0
        db_extra_search_path: db_extra_search_path
        db_schema: db_schema
    ProjectRefResponse:
      required:
      - id
      - name
      - ref
      type: object
      properties:
        id:
          type: number
        ref:
          type: string
        name:
          type: string
      example:
        ref: ref
        name: name
        id: 0.80082819046101150206595775671303272247314453125
    SecretResponse:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      example:
        name: name
        value: value
    CreateSecretBody:
      required:
      - name
      - value
      type: object
      properties:
        name:
          maxLength: 256
          pattern: /^(?!SUPABASE_).*/
          type: string
          description: Secret name must not start with the SUPABASE_ prefix.
          example: string
        value:
          maxLength: 24576
          type: string
    SslEnforcements:
      required:
      - database
      type: object
      properties:
        database:
          type: boolean
      example:
        database: true
    SslEnforcementResponse:
      required:
      - appliedSuccessfully
      - currentConfig
      type: object
      properties:
        currentConfig:
          $ref: '#/components/schemas/SslEnforcements'
        appliedSuccessfully:
          type: boolean
      example:
        currentConfig:
          database: true
        appliedSuccessfully: true
    SslEnforcementRequest:
      required:
      - requestedConfig
      type: object
      properties:
        requestedConfig:
          $ref: '#/components/schemas/SslEnforcements'
    TypescriptResponse:
      required:
      - types
      type: object
      properties:
        types:
          type: string
      example:
        types: types
    VanitySubdomainConfigResponse:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          enum:
          - not-used
          - custom-domain-used
          - active
        custom_domain:
          type: string
      example:
        custom_domain: custom_domain
        status: not-used
    VanitySubdomainBody:
      required:
      - vanity_subdomain
      type: object
      properties:
        vanity_subdomain:
          type: string
    SubdomainAvailabilityResponse:
      required:
      - available
      type: object
      properties:
        available:
          type: boolean
      example:
        available: true
    ActivateVanitySubdomainResponse:
      required:
      - custom_domain
      type: object
      properties:
        custom_domain:
          type: string
      example:
        custom_domain: custom_domain
    UpgradeDatabaseBody:
      required:
      - target_version
      type: object
      properties:
        target_version:
          type: number
    ProjectUpgradeInitiateResponse:
      required:
      - tracking_id
      type: object
      properties:
        tracking_id:
          type: string
      example:
        tracking_id: tracking_id
    ProjectVersion:
      required:
      - app_version
      - postgres_version
      type: object
      properties:
        postgres_version:
          type: number
        app_version:
          type: string
      example:
        postgres_version: 0.80082819046101150206595775671303272247314453125
        app_version: app_version
    ProjectUpgradeEligibilityResponse:
      required:
      - current_app_version
      - duration_estimate_hours
      - eligible
      - extension_dependent_objects
      - latest_app_version
      - legacy_auth_custom_roles
      - potential_breaking_changes
      - requires_manual_intervention
      - target_upgrade_versions
      type: object
      properties:
        eligible:
          type: boolean
        current_app_version:
          type: string
        latest_app_version:
          type: string
        target_upgrade_versions:
          type: array
          items:
            $ref: '#/components/schemas/ProjectVersion'
        requires_manual_intervention:
          type: string
          nullable: true
        potential_breaking_changes:
          type: array
          items:
            type: string
        duration_estimate_hours:
          type: number
        legacy_auth_custom_roles:
          type: array
          items:
            type: string
        extension_dependent_objects:
          type: array
          items:
            type: string
      example:
        target_upgrade_versions:
        - postgres_version: 0.80082819046101150206595775671303272247314453125
          app_version: app_version
        - postgres_version: 0.80082819046101150206595775671303272247314453125
          app_version: app_version
        potential_breaking_changes:
        - potential_breaking_changes
        - potential_breaking_changes
        extension_dependent_objects:
        - extension_dependent_objects
        - extension_dependent_objects
        requires_manual_intervention: requires_manual_intervention
        legacy_auth_custom_roles:
        - legacy_auth_custom_roles
        - legacy_auth_custom_roles
        current_app_version: current_app_version
        eligible: true
        latest_app_version: latest_app_version
        duration_estimate_hours: 6.02745618307040320615897144307382404804229736328125
    DatabaseUpgradeStatus:
      required:
      - initiated_at
      - status
      - target_version
      type: object
      properties:
        initiated_at:
          type: string
        target_version:
          type: number
        error:
          type: string
          enum:
          - 1_upgraded_instance_launch_failed
          - 2_volume_detachchment_from_upgraded_instance_failed
          - 3_volume_attachment_to_original_instance_failed
          - 4_data_upgrade_initiation_failed
          - 5_data_upgrade_completion_failed
          - 6_volume_detachchment_from_original_instance_failed
          - 7_volume_attachment_to_upgraded_instance_failed
          - 8_upgrade_completion_failed
        progress:
          type: string
          enum:
          - 1_started
          - 2_launched_upgraded_instance
          - 3_detached_volume_from_upgraded_instance
          - 4_attached_volume_to_original_instance
          - 5_initiated_data_upgrade
          - 6_completed_data_upgrade
          - 7_detached_volume_from_original_instance
          - 8_attached_volume_to_upgraded_instance
          - 9_completed_upgrade
        status:
          type: number
          enum:
          - 0
          - 1
          - 2
    DatabaseUpgradeStatusResponse:
      required:
      - databaseUpgradeStatus
      type: object
      properties:
        databaseUpgradeStatus:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/DatabaseUpgradeStatus'
      example:
        databaseUpgradeStatus: ""
    ReadOnlyStatusResponse:
      required:
      - enabled
      - override_active_until
      - override_enabled
      type: object
      properties:
        enabled:
          type: boolean
        override_enabled:
          type: boolean
        override_active_until:
          type: string
      example:
        override_active_until: override_active_until
        override_enabled: true
        enabled: true
    SetUpReadReplicaBody:
      required:
      - read_replica_region
      type: object
      properties:
        read_replica_region:
          type: string
          description: Region you want your read replica to reside in
          example: us-east-1
          enum:
          - us-east-1
          - us-west-1
          - us-west-2
          - ap-east-1
          - ap-southeast-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-southeast-2
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ca-central-1
          - ap-south-1
          - sa-east-1
    RemoveReadReplicaBody:
      required:
      - database_identifier
      type: object
      properties:
        database_identifier:
          type: string
    AuthHealthResponse:
      required:
      - description
      - name
      - version
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        description:
          type: string
    RealtimeHealthResponse:
      required:
      - connected_cluster
      - db_connected
      - healthy
      type: object
      properties:
        healthy:
          type: boolean
        db_connected:
          type: boolean
        connected_cluster:
          type: number
    ServiceHealthResponse:
      required:
      - healthy
      - name
      - status
      type: object
      properties:
        info:
          oneOf:
          - $ref: '#/components/schemas/AuthHealthResponse'
          - $ref: '#/components/schemas/RealtimeHealthResponse'
        name:
          type: string
          enum:
          - auth
          - db
          - pooler
          - realtime
          - rest
          - storage
        healthy:
          type: boolean
        status:
          type: string
          enum:
          - COMING_UP
          - ACTIVE_HEALTHY
          - UNHEALTHY
        error:
          type: string
      example:
        healthy: true
        name: auth
        error: error
        info: ""
        status: COMING_UP
    PostgresConfigResponse:
      type: object
      properties:
        statement_timeout:
          type: string
        effective_cache_size:
          type: string
        maintenance_work_mem:
          type: string
        max_connections:
          maximum: 262143
          minimum: 1
          type: integer
        max_locks_per_transaction:
          maximum: 2147483640
          minimum: 10
          type: integer
        max_parallel_maintenance_workers:
          maximum: 1024
          minimum: 0
          type: integer
        max_parallel_workers:
          maximum: 1024
          minimum: 0
          type: integer
        max_parallel_workers_per_gather:
          maximum: 1024
          minimum: 0
          type: integer
        max_worker_processes:
          maximum: 262143
          minimum: 0
          type: integer
        shared_buffers:
          type: string
        work_mem:
          type: string
        session_replication_role:
          type: string
          enum:
          - origin
          - replica
          - local
      example:
        maintenance_work_mem: maintenance_work_mem
        max_connections: 20994
        max_parallel_workers_per_gather: 577
        effective_cache_size: effective_cache_size
        max_locks_per_transaction: 1294386358
        max_parallel_maintenance_workers: 150
        max_parallel_workers: 610
        shared_buffers: shared_buffers
        session_replication_role: origin
        statement_timeout: statement_timeout
        max_worker_processes: 60348
        work_mem: work_mem
    UpdatePostgresConfigBody:
      type: object
      properties:
        statement_timeout:
          type: string
        effective_cache_size:
          type: string
        maintenance_work_mem:
          type: string
        max_connections:
          maximum: 262143
          minimum: 1
          type: integer
        max_locks_per_transaction:
          maximum: 2147483640
          minimum: 10
          type: integer
        max_parallel_maintenance_workers:
          maximum: 1024
          minimum: 0
          type: integer
        max_parallel_workers:
          maximum: 1024
          minimum: 0
          type: integer
        max_parallel_workers_per_gather:
          maximum: 1024
          minimum: 0
          type: integer
        max_worker_processes:
          maximum: 262143
          minimum: 0
          type: integer
        shared_buffers:
          type: string
        work_mem:
          type: string
        session_replication_role:
          type: string
          enum:
          - origin
          - replica
          - local
    V1PgbouncerConfigResponse:
      type: object
      properties:
        pool_mode:
          type: string
          enum:
          - transaction
          - session
          - statement
        default_pool_size:
          type: number
        ignore_startup_parameters:
          type: string
        max_client_conn:
          type: number
        connection_string:
          type: string
      example:
        ignore_startup_parameters: ignore_startup_parameters
        default_pool_size: 0.80082819046101150206595775671303272247314453125
        pool_mode: transaction
        max_client_conn: 6.02745618307040320615897144307382404804229736328125
        connection_string: connection_string
    AuthConfigResponse:
      type: object
      properties:
        smtp_admin_email:
          type: string
        smtp_host:
          type: string
        smtp_port:
          type: string
        smtp_user:
          type: string
        smtp_pass:
          type: string
        smtp_max_frequency:
          type: number
        smtp_sender_name:
          type: string
        rate_limit_email_sent:
          maximum: 2147483647
          minimum: 0
          type: number
      example:
        smtp_port: smtp_port
        smtp_pass: smtp_pass
        smtp_user: smtp_user
        smtp_admin_email: smtp_admin_email
        rate_limit_email_sent: 1294386358.615272998809814453125
        smtp_host: smtp_host
        smtp_max_frequency: 0.80082819046101150206595775671303272247314453125
        smtp_sender_name: smtp_sender_name
    UpdateAuthConfigBody:
      type: object
      properties:
        smtp_admin_email:
          type: string
        smtp_host:
          type: string
        smtp_port:
          type: string
        smtp_user:
          type: string
        smtp_pass:
          type: string
        smtp_max_frequency:
          type: number
        smtp_sender_name:
          type: string
        rate_limit_email_sent:
          maximum: 2147483647
          minimum: 0
          type: number
    RunQueryBody:
      required:
      - query
      type: object
      properties:
        query:
          type: string
    CreateFunctionBody:
      required:
      - body
      - name
      - slug
      type: object
      properties:
        slug:
          pattern: "/^[A-Za-z0-9_-]+$/"
          type: string
        name:
          type: string
        body:
          type: string
        verify_jwt:
          type: boolean
    FunctionResponse:
      required:
      - created_at
      - id
      - name
      - slug
      - status
      - updated_at
      - version
      type: object
      properties:
        id:
          type: string
        slug:
          type: string
        name:
          type: string
        status:
          type: string
          enum:
          - ACTIVE
          - REMOVED
          - THROTTLED
        version:
          type: number
        created_at:
          type: number
        updated_at:
          type: number
        verify_jwt:
          type: boolean
        import_map:
          type: boolean
        entrypoint_path:
          type: string
        import_map_path:
          type: string
      example:
        verify_jwt: true
        import_map: true
        updated_at: 1.46581298050294517310021547018550336360931396484375
        import_map_path: import_map_path
        name: name
        created_at: 6.02745618307040320615897144307382404804229736328125
        id: id
        version: 0.80082819046101150206595775671303272247314453125
        slug: slug
        entrypoint_path: entrypoint_path
        status: ACTIVE
    FunctionSlugResponse:
      required:
      - created_at
      - id
      - name
      - slug
      - status
      - updated_at
      - version
      type: object
      properties:
        id:
          type: string
        slug:
          type: string
        name:
          type: string
        status:
          type: string
          enum:
          - ACTIVE
          - REMOVED
          - THROTTLED
        version:
          type: number
        created_at:
          type: number
        updated_at:
          type: number
        verify_jwt:
          type: boolean
        import_map:
          type: boolean
        entrypoint_path:
          type: string
        import_map_path:
          type: string
      example:
        verify_jwt: true
        import_map: true
        updated_at: 1.46581298050294517310021547018550336360931396484375
        import_map_path: import_map_path
        name: name
        created_at: 6.02745618307040320615897144307382404804229736328125
        id: id
        version: 0.80082819046101150206595775671303272247314453125
        slug: slug
        entrypoint_path: entrypoint_path
        status: ACTIVE
    UpdateFunctionBody:
      type: object
      properties:
        name:
          type: string
        body:
          type: string
        verify_jwt:
          type: boolean
    V1StorageBucketResponse:
      required:
      - created_at
      - id
      - name
      - owner
      - public
      - updated_at
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        owner:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        public:
          type: boolean
      example:
        owner: owner
        updated_at: updated_at
        public: true
        name: name
        created_at: created_at
        id: id
    AttributeValue:
      type: object
      properties:
        default:
          oneOf:
          - type: object
          - type: number
          - type: string
          - type: boolean
        name:
          type: string
        names:
          type: array
          items:
            type: string
      example:
        default: ""
        names:
        - names
        - names
        name: name
    AttributeMapping:
      required:
      - keys
      type: object
      properties:
        keys:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
      example:
        keys:
          key:
            default: ""
            names:
            - names
            - names
            name: name
    CreateProviderBody:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: What type of provider will be created
          enum:
          - saml
        metadata_xml:
          type: string
        metadata_url:
          type: string
        domains:
          type: array
          items:
            type: string
        attribute_mapping:
          $ref: '#/components/schemas/AttributeMapping'
    SamlDescriptor:
      required:
      - entity_id
      - id
      type: object
      properties:
        id:
          type: string
        entity_id:
          type: string
        metadata_url:
          type: string
        metadata_xml:
          type: string
        attribute_mapping:
          $ref: '#/components/schemas/AttributeMapping'
      example:
        metadata_url: metadata_url
        attribute_mapping:
          keys:
            key:
              default: ""
              names:
              - names
              - names
              name: name
        id: id
        entity_id: entity_id
        metadata_xml: metadata_xml
    Domain:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        domain:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
      example:
        updated_at: updated_at
        domain: domain
        created_at: created_at
        id: id
    CreateProviderResponse:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        saml:
          $ref: '#/components/schemas/SamlDescriptor'
        domains:
          type: array
          items:
            $ref: '#/components/schemas/Domain'
        created_at:
          type: string
        updated_at:
          type: string
      example:
        updated_at: updated_at
        saml:
          metadata_url: metadata_url
          attribute_mapping:
            keys:
              key:
                default: ""
                names:
                - names
                - names
                name: name
          id: id
          entity_id: entity_id
          metadata_xml: metadata_xml
        domains:
        - updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
        - updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
        created_at: created_at
        id: id
    Provider:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        saml:
          $ref: '#/components/schemas/SamlDescriptor'
        domains:
          type: array
          items:
            $ref: '#/components/schemas/Domain'
        created_at:
          type: string
        updated_at:
          type: string
      example:
        updated_at: updated_at
        saml:
          metadata_url: metadata_url
          attribute_mapping:
            keys:
              key:
                default: ""
                names:
                - names
                - names
                name: name
          id: id
          entity_id: entity_id
          metadata_xml: metadata_xml
        domains:
        - updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
        - updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
        created_at: created_at
        id: id
    ListProvidersResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Provider'
      example:
        items:
        - updated_at: updated_at
          saml:
            metadata_url: metadata_url
            attribute_mapping:
              keys:
                key:
                  default: ""
                  names:
                  - names
                  - names
                  name: name
            id: id
            entity_id: entity_id
            metadata_xml: metadata_xml
          domains:
          - updated_at: updated_at
            domain: domain
            created_at: created_at
            id: id
          - updated_at: updated_at
            domain: domain
            created_at: created_at
            id: id
          created_at: created_at
          id: id
        - updated_at: updated_at
          saml:
            metadata_url: metadata_url
            attribute_mapping:
              keys:
                key:
                  default: ""
                  names:
                  - names
                  - names
                  name: name
            id: id
            entity_id: entity_id
            metadata_xml: metadata_xml
          domains:
          - updated_at: updated_at
            domain: domain
            created_at: created_at
            id: id
          - updated_at: updated_at
            domain: domain
            created_at: created_at
            id: id
          created_at: created_at
          id: id
    GetProviderResponse:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        saml:
          $ref: '#/components/schemas/SamlDescriptor'
        domains:
          type: array
          items:
            $ref: '#/components/schemas/Domain'
        created_at:
          type: string
        updated_at:
          type: string
      example:
        updated_at: updated_at
        saml:
          metadata_url: metadata_url
          attribute_mapping:
            keys:
              key:
                default: ""
                names:
                - names
                - names
                name: name
          id: id
          entity_id: entity_id
          metadata_xml: metadata_xml
        domains:
        - updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
        - updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
        created_at: created_at
        id: id
    UpdateProviderBody:
      type: object
      properties:
        metadata_xml:
          type: string
        metadata_url:
          type: string
        domains:
          type: array
          items:
            type: string
        attribute_mapping:
          $ref: '#/components/schemas/AttributeMapping'
    UpdateProviderResponse:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        saml:
          $ref: '#/components/schemas/SamlDescriptor'
        domains:
          type: array
          items:
            $ref: '#/components/schemas/Domain'
        created_at:
          type: string
        updated_at:
          type: string
      example:
        updated_at: updated_at
        saml:
          metadata_url: metadata_url
          attribute_mapping:
            keys:
              key:
                default: ""
                names:
                - names
                - names
                name: name
          id: id
          entity_id: entity_id
          metadata_xml: metadata_xml
        domains:
        - updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
        - updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
        created_at: created_at
        id: id
    DeleteProviderResponse:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        saml:
          $ref: '#/components/schemas/SamlDescriptor'
        domains:
          type: array
          items:
            $ref: '#/components/schemas/Domain'
        created_at:
          type: string
        updated_at:
          type: string
      example:
        updated_at: updated_at
        saml:
          metadata_url: metadata_url
          attribute_mapping:
            keys:
              key:
                default: ""
                names:
                - names
                - names
                name: name
          id: id
          entity_id: entity_id
          metadata_xml: metadata_xml
        domains:
        - updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
        - updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
        created_at: created_at
        id: id
    V1Backup:
      required:
      - inserted_at
      - is_physical_backup
      - status
      type: object
      properties:
        status:
          type: string
          enum:
          - COMPLETED
          - FAILED
          - PENDING
          - REMOVED
          - ARCHIVED
        is_physical_backup:
          type: boolean
        inserted_at:
          type: string
      example:
        inserted_at: inserted_at
        is_physical_backup: true
        status: COMPLETED
    V1BackupsResponse:
      required:
      - backups
      - physical_backup_data
      - pitr_enabled
      - region
      - walg_enabled
      type: object
      properties:
        region:
          type: string
        walg_enabled:
          type: boolean
        pitr_enabled:
          type: boolean
        backups:
          type: array
          items:
            $ref: '#/components/schemas/V1Backup'
        physical_backup_data:
          $ref: '#/components/schemas/V1BackupsResponse_physical_backup_data'
      example:
        physical_backup_data:
          latest_physical_backup_date_unix: 6.02745618307040320615897144307382404804229736328125
          earliest_physical_backup_date_unix: 0.80082819046101150206595775671303272247314453125
        walg_enabled: true
        region: region
        pitr_enabled: true
        backups:
        - inserted_at: inserted_at
          is_physical_backup: true
          status: COMPLETED
        - inserted_at: inserted_at
          is_physical_backup: true
          status: COMPLETED
    V1RestorePitrBody:
      required:
      - recovery_time_target_unix
      type: object
      properties:
        recovery_time_target_unix:
          type: number
    V1OrganizationMemberResponse:
      required:
      - mfa_enabled
      - role_name
      - user_id
      - user_name
      type: object
      properties:
        user_id:
          type: string
        user_name:
          type: string
        email:
          type: string
        role_name:
          type: string
        mfa_enabled:
          type: boolean
      example:
        role_name: role_name
        user_id: user_id
        user_name: user_name
        mfa_enabled: true
        email: email
    BillingPlanId:
      type: string
      enum:
      - free
      - pro
      - team
      - enterprise
    V1OrganizationSlugResponse:
      required:
      - id
      - name
      - opt_in_tags
      type: object
      properties:
        plan:
          $ref: '#/components/schemas/BillingPlanId'
        opt_in_tags:
          type: array
          items:
            type: string
            enum:
            - AI_SQL_GENERATOR_OPT_IN
            - PREVIEW_BRANCHES_OPT_IN
        id:
          type: string
        name:
          type: string
      example:
        opt_in_tags:
        - AI_SQL_GENERATOR_OPT_IN
        - AI_SQL_GENERATOR_OPT_IN
        name: name
        id: id
        plan: free
    V1BackupsResponse_physical_backup_data:
      type: object
      properties:
        earliest_physical_backup_date_unix:
          type: number
        latest_physical_backup_date_unix:
          type: number
      example:
        latest_physical_backup_date_unix: 6.02745618307040320615897144307382404804229736328125
        earliest_physical_backup_date_unix: 0.80082819046101150206595775671303272247314453125
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT

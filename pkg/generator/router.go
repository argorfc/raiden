package generator

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"io/fs"
	"path/filepath"
	"reflect"
	"strings"

	"github.com/sev-2/raiden"
	"github.com/sev-2/raiden/pkg/logger"
	"github.com/sev-2/raiden/pkg/utils"
	"github.com/valyala/fasthttp"
)

// ----- Define type, variable and constant -----
type (
	GenerateRouteItem struct {
		Type       string
		Path       string
		Methods    string
		Controller string
	}

	GenerateRouterData struct {
		Imports []string
		Package string
		Routes  []GenerateRouteItem
	}

	FoundRoute struct {
		Package string
		Name    string
		Tag     string
		Methods []string
	}
)

const (
	RouterFilename = "router.go"
	RouterDir      = "internal/bootstrap"
	RouterTemplate = `// Code generated by raiden-cli; DO NOT EDIT.
package {{ .Package }}
{{if gt (len .Imports) 0 }}
import (
{{- range .Imports}}
	{{.}}
{{- end}}
)
{{end }}
func RegisterRoute(server *raiden.Server) {
	server.RegisterRoute([]*raiden.Route{
		{{- range .Routes}}
		{
			Type:       {{ .Type }},
			Path:       {{ .Path }},
			Methods:    {{ .Methods }},
			Controller: &{{ .Controller }},
		},
		{{- end}}
	})
}
`
)

// Generate route configuration file
func GenerateRoute(basePath string, projectName string, generateFn GenerateFn) error {
	routePath := filepath.Join(basePath, RouterDir)
	logger.Debugf("GenerateRoute - create %s folder if not exist", routePath)
	if exist := utils.IsFolderExists(routePath); !exist {
		if err := utils.CreateFolder(routePath); err != nil {
			return err
		}
	}

	controllerPath := filepath.Join(basePath, ControllerDir)

	// scan all controller
	routes, err := WalkScanControllers(controllerPath)
	if err != nil {
		return err
	}

	input, err := createRouteInput(projectName, routePath, routes)
	if err != nil {
		return err
	}

	logger.Debugf("GenerateRoute - generate route to %s", input.OutputPath)
	return generateFn(input, nil)
}

func WalkScanControllers(controllerPath string) ([]GenerateRouteItem, error) {
	logger.Debugf("GenerateRoute - scan %s for register all controller", controllerPath)

	routes := make([]GenerateRouteItem, 0)
	err := filepath.Walk(controllerPath, func(path string, info fs.FileInfo, err error) error {
		if strings.HasSuffix(path, ".go") {
			logger.Debugf("GenerateRoute - collect routes from %s", path)
			rs, e := getRoutes(path)
			if e != nil {
				return e
			}

			for _, r := range rs {
				if r.Path != "" && len(r.Methods) > 0 {
					logger.Debugf("GenerateRoute - found controller %s", r.Controller)
					routes = append(routes, r)
				}
			}

		}
		return nil
	})
	if err != nil {
		return nil, err
	}

	return routes, nil
}

func getRoutes(filePath string) (r []GenerateRouteItem, err error) {
	fset := token.NewFileSet()
	file, err := parser.ParseFile(fset, filePath, nil, parser.ParseComments)
	if err != nil {
		return r, err
	}

	// Traverse the AST to find the struct with the Http attribute
	foundRouteMap := make(map[string]*FoundRoute)
	ast.Inspect(file, func(node ast.Node) bool {
		switch t := node.(type) {
		case *ast.TypeSpec:
			if t.Name != nil && t.Type != nil {
				// Check if it's a struct
				if st, ok := t.Type.(*ast.StructType); ok {
					// Check if it has the Http attribute
					for _, field := range st.Fields.List {
						for _, fName := range field.Names {
							if fName != nil && fName.Name == "Http" && field.Tag != nil {
								tag := strings.Trim(field.Tag.Value, "`")
								foundRoute := &FoundRoute{
									Name: t.Name.Name,
									Tag:  tag,
								}
								foundRouteMap[t.Name.Name] = foundRoute
								return false // Stop the traversal
							}
						}
					}
				}
			}
		case *ast.FuncDecl:
			if t == nil || t.Recv == nil || t.Recv.List[0].Type == nil {
				return true
			}
			startExp, isStartExp := t.Recv.List[0].Type.(*ast.StarExpr)
			if isStartExp {
				structName := fmt.Sprintf("%s", startExp.X)
				route, isExist := foundRouteMap[structName]
				if isExist {
					switch strings.ToUpper(t.Name.Name) {
					case fasthttp.MethodGet:
						route.Methods = append(route.Methods, "fasthttp.MethodGet")
					case fasthttp.MethodPost:
						route.Methods = append(route.Methods, "fasthttp.MethodPost")
					case fasthttp.MethodPatch:
						route.Methods = append(route.Methods, "fasthttp.MethodPatch")
					case fasthttp.MethodPut:
						route.Methods = append(route.Methods, "fasthttp.MethodPut")
					case fasthttp.MethodDelete:
						route.Methods = append(route.Methods, "fasthttp.MethodDelete")
					case fasthttp.MethodOptions:
						route.Methods = append(route.Methods, "fasthttp.MethodOptions")
					case fasthttp.MethodHead:
						route.Methods = append(route.Methods, "fasthttp.MethodHead")
					}
				}
			}
		}
		return true
	})

	if len(foundRouteMap) == 0 {
		return r, nil
	}

	// bind package name\
	fileDir := filepath.Dir(filePath)
	for _, m := range foundRouteMap {
		_, m.Package = filepath.Split(fileDir)
	}

	for _, m := range foundRouteMap {
		rNew, err := generateRoute(m)
		if err != nil {
			return r, err
		}
		r = append(r, rNew)
	}

	return
}

func generateRoute(foundRoute *FoundRoute) (GenerateRouteItem, error) {
	var r GenerateRouteItem

	r.Controller = fmt.Sprintf("%s.%s{}", foundRoute.Package, foundRoute.Name)
	tagItems := strings.Split(foundRoute.Tag, " ")

	r.Methods = generateArrayDeclaration(reflect.ValueOf(foundRoute.Methods), true)

	for _, tagItem := range tagItems {
		items := strings.Split(tagItem, ":")
		if len(items) != 2 {
			continue
		}

		trimmedItem := strings.Trim(items[1], "\"")
		switch items[0] {
		case "path":
			r.Path = fmt.Sprintf("%q", trimmedItem)
		case "type":
			switch trimmedItem {
			case string(raiden.RouteTypeFunction):
				r.Type = "raiden.RouteTypeFunction"
			case string(raiden.RouteTypeCustom):
				r.Type = "raiden.RouteTypeCustom"
			case string(raiden.RouteTypeRpc):
				r.Type = "raiden.RouteTypeRpc"
			case string(raiden.RouteTypeRest):
				r.Type = "raiden.RouteTypeRest"
			case string(raiden.RouteTypeRealtime):
				r.Type = "raiden.RouteTypeRealtime"
			case string(raiden.RouteTypeStorage):
				r.Type = "raiden.RouteTypeStorage"
			default:
				return r, fmt.Errorf(
					"%s.%s : unsupported route type %s, available type are %s, %s, %s, %s, %s and %s ",
					foundRoute.Package, foundRoute.Name, items[1],
					raiden.RouteTypeFunction, raiden.RouteTypeCustom, raiden.RouteTypeRpc,
					raiden.RouteTypeRest, raiden.RouteTypeRealtime, raiden.RouteTypeStorage,
				)
			}
		}
	}
	return r, nil
}

func createRouteInput(projectName string, routePath string, routes []GenerateRouteItem) (input GenerateInput, err error) {
	// set file path
	filePath := filepath.Join(routePath, RouterFilename)

	// set imports path
	routeImportPath := fmt.Sprintf("%s/internal/controllers", utils.ToGoModuleName(projectName))
	imports := []string{
		fmt.Sprintf("%q", "github.com/sev-2/raiden"),
		fmt.Sprintf("%q", routeImportPath),
		fmt.Sprintf("%q", "github.com/valyala/fasthttp"),
	}

	// set passed parameter
	data := GenerateRouterData{
		Package: "bootstrap",
		Imports: imports,
		Routes:  routes,
	}

	input = GenerateInput{
		BindData:     data,
		Template:     RouterTemplate,
		TemplateName: "routerTemplate",
		OutputPath:   filePath,
	}

	return
}

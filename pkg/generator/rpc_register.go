package generator

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"io/fs"
	"path/filepath"
	"strings"

	"github.com/sev-2/raiden/pkg/logger"
	"github.com/sev-2/raiden/pkg/utils"
)

// ----- Define type, variable and constant -----
type (
	GenerateRegisterRpcData struct {
		Imports []string
		Package string
		Rpc     []string
	}
)

const (
	RpcRegisterFilename = "rpc.go"
	RpcRegisterDir      = "internal/bootstrap"
	RpcRegisterTemplate = `// Code generated by raiden-cli; DO NOT EDIT.
package {{ .Package }}
{{if gt (len .Imports) 0 }}
import (
{{- range .Imports}}
	{{.}}
{{- end}}
)
{{end }}
func RegisterRpc() {
	resource.RegisterRpc(
		{{- range .Rpc}}
		&rpc.{{.}}{},
		{{- end}}
	)
}
`
)

func GenerateRpcRegister(basePath string, projectName string, generateFn GenerateFn) error {
	registerRpcDir := filepath.Join(basePath, RpcRegisterDir)
	logger.Debugf("GenerateRpcRegister - create %s folder if not exist", registerRpcDir)
	if exist := utils.IsFolderExists(registerRpcDir); !exist {
		if err := utils.CreateFolder(registerRpcDir); err != nil {
			return err
		}
	}

	rpcDir := filepath.Join(basePath, RpcDir)
	logger.Debugf("GenerateRpcRegister - create %s folder if not exist", registerRpcDir)
	if exist := utils.IsFolderExists(rpcDir); !exist {
		if err := utils.CreateFolder(rpcDir); err != nil {
			return err
		}
	}

	// scan all controller
	listRpc, err := WalkScanRpc(rpcDir)
	if err != nil {
		return err
	}

	input, err := createRegisterRpcInput(projectName, registerRpcDir, listRpc)
	if err != nil {
		return err
	}

	logger.Debugf("GenerateRpcRegister - generate rpc to %s", input.OutputPath)
	return generateFn(input, nil)
}

func createRegisterRpcInput(projectName string, registerRpcDir string, listRpc []string) (input GenerateInput, err error) {
	// set file path
	filePath := filepath.Join(registerRpcDir, RpcRegisterFilename)

	// set imports path
	imports := []string{
		fmt.Sprintf("%q", "github.com/sev-2/raiden/pkg/resource"),
	}

	if len(listRpc) > 0 {
		rpcImportPath := fmt.Sprintf("%s/internal/rpc", utils.ToGoModuleName(projectName))
		imports = append(imports, fmt.Sprintf("%q", rpcImportPath))
	}

	// set passed parameter
	data := GenerateRegisterRpcData{
		Package: "bootstrap",
		Imports: imports,
		Rpc:     listRpc,
	}

	input = GenerateInput{
		BindData:     data,
		Template:     RpcRegisterTemplate,
		TemplateName: "rpcRegisterTemplate",
		OutputPath:   filePath,
	}

	return
}

func WalkScanRpc(rpcDir string) ([]string, error) {
	logger.Debugf("GenerateRpcRegister - scan %s for register all rpc", rpcDir)

	rpc := make([]string, 0)
	err := filepath.Walk(rpcDir, func(path string, info fs.FileInfo, err error) error {
		if strings.HasSuffix(path, ".go") {
			logger.Debugf("GenerateRpcRegister - collect rpc from %s", path)
			rs, e := getRpc(path)
			if e != nil {
				return e
			}

			rpc = append(rpc, rs...)

		}
		return nil
	})
	if err != nil {
		return nil, err
	}

	return rpc, nil
}

func getRpc(filePath string) (r []string, err error) {
	fset := token.NewFileSet()
	file, err := parser.ParseFile(fset, filePath, nil, parser.ParseComments)
	if err != nil {
		return r, err
	}

	// Traverse the AST to find the struct with the Http attribute
	for _, decl := range file.Decls {
		genDecl, ok := decl.(*ast.GenDecl)
		if !ok || genDecl.Tok != token.TYPE {
			continue
		}
		for _, spec := range genDecl.Specs {
			typeSpec, ok := spec.(*ast.TypeSpec)
			if !ok {
				continue
			}
			st, ok := typeSpec.Type.(*ast.StructType)
			if !ok {
				continue
			}

			if len(st.Fields.List) == 0 {
				continue
			}

			for _, f := range st.Fields.List {
				if se, isSe := f.Type.(*ast.SelectorExpr); isSe && se.Sel.Name == "RpcBase" {
					r = append(r, typeSpec.Name.Name)
					continue
				}
			}

		}
	}

	return
}
